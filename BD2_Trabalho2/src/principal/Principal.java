package principal;

import dao.ConsultarInformationSchema;
import excecao.BDException;
import java.awt.Point;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.MouseInputAdapter;
import modelo.internalframa.Tabelas;
import modelo.lista.ListaTabelaModelo;
import modelo.tabela.TabelaModelo;

public class Principal extends javax.swing.JFrame {
    private List<String> tabelas;
    private String tabela;
    private List<String> bancos;
    private String banco;
    private List<Tabelas> framesInternas = new ArrayList<>();
    private List<List<String>> linhas = new ArrayList<>();
    
    public Principal(String usuario) {
        initComponents();
        tfUsuario.setText(usuario);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelConsultas = new javax.swing.JPanel();
        painelBancos = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listBancos = new javax.swing.JList();
        painelTabelas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTabelas = new javax.swing.JList();
        painelPrincipal = new javax.swing.JPanel();
        painelCampos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbAtributos = new javax.swing.JTable();
        lUsuario = new javax.swing.JLabel();
        tfUsuario = new javax.swing.JLabel();
        lBanco = new javax.swing.JLabel();
        tfBanco = new javax.swing.JLabel();
        bGerarSQL = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Banco");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        painelConsultas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Consultas", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        painelBancos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Banco", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        listBancos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listBancosMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(listBancos);

        javax.swing.GroupLayout painelBancosLayout = new javax.swing.GroupLayout(painelBancos);
        painelBancos.setLayout(painelBancosLayout);
        painelBancosLayout.setHorizontalGroup(
            painelBancosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
        );
        painelBancosLayout.setVerticalGroup(
            painelBancosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        painelTabelas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tabelas", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        listTabelas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listTabelasMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(listTabelas);

        javax.swing.GroupLayout painelTabelasLayout = new javax.swing.GroupLayout(painelTabelas);
        painelTabelas.setLayout(painelTabelasLayout);
        painelTabelasLayout.setHorizontalGroup(
            painelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        painelTabelasLayout.setVerticalGroup(
            painelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout painelConsultasLayout = new javax.swing.GroupLayout(painelConsultas);
        painelConsultas.setLayout(painelConsultasLayout);
        painelConsultasLayout.setHorizontalGroup(
            painelConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelBancos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(painelTabelas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        painelConsultasLayout.setVerticalGroup(
            painelConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelConsultasLayout.createSequentialGroup()
                .addComponent(painelBancos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(painelTabelas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        painelPrincipal.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tabelas", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 0))); // NOI18N
        painelPrincipal.setForeground(new java.awt.Color(255, 255, 255));
        painelPrincipal.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                painelPrincipalComponentMoved(evt);
            }
        });

        javax.swing.GroupLayout painelPrincipalLayout = new javax.swing.GroupLayout(painelPrincipal);
        painelPrincipal.setLayout(painelPrincipalLayout);
        painelPrincipalLayout.setHorizontalGroup(
            painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        painelPrincipalLayout.setVerticalGroup(
            painelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        painelCampos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Atributos", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 0))); // NOI18N

        tbAtributos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbAtributos);

        javax.swing.GroupLayout painelCamposLayout = new javax.swing.GroupLayout(painelCampos);
        painelCampos.setLayout(painelCamposLayout);
        painelCamposLayout.setHorizontalGroup(
            painelCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
        );
        painelCamposLayout.setVerticalGroup(
            painelCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
        );

        lUsuario.setText("Usu√°rio:");

        tfUsuario.setText("jLabel2");

        lBanco.setText("Banco:");

        tfBanco.setText("jLabel4");

        bGerarSQL.setText("GERAR SQL");
        bGerarSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGerarSQLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfUsuario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 517, Short.MAX_VALUE)
                        .addComponent(lBanco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfBanco, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(painelCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bGerarSQL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lUsuario)
                            .addComponent(tfUsuario)
                            .addComponent(lBanco)
                            .addComponent(tfBanco))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(painelCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(bGerarSQL, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(painelConsultas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(11, 11, 11))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        preencherBancos();
    }//GEN-LAST:event_formWindowGainedFocus

    private void listBancosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listBancosMouseReleased
        selecionarBanco();
        realizarAcaoBanco(evt);
    }//GEN-LAST:event_listBancosMouseReleased

    private void listTabelasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTabelasMouseReleased
        selecionarTabela();
        realizarAcaoTabela(evt);
    }//GEN-LAST:event_listTabelasMouseReleased

    private void painelPrincipalComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_painelPrincipalComponentMoved
        //this.repaint();
        //this.update(painelPrincipal.getGraphics());
    }//GEN-LAST:event_painelPrincipalComponentMoved

    private void bGerarSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGerarSQLActionPerformed
        int linhasSelecionadas[] = tbAtributos.getSelectedRows();
        List<List<String>> linhas = new ArrayList<>();
        for (int i = 0; i < linhasSelecionadas.length; i++) {
            linhas.add(this.linhas.get(linhasSelecionadas[i]));
        }
        SQLGerado sqlg = new SQLGerado(linhas);
        sqlg.setVisible(true);
    }//GEN-LAST:event_bGerarSQLActionPerformed

    private void selecionarBanco() {
        painelPrincipal.removeAll();
        framesInternas.clear();
        int linha = listBancos.getSelectedIndex();
        if (linha >= 0) {
            this.banco = bancos.get(linha);
        }
    }
    
    private void realizarAcaoBanco(MouseEvent evt) {
        if (evt.getButton() == MouseEvent.BUTTON1) { // Bot√£o Esquerdo do Mouse
            preencherTabelas();
        }
    }
    
    private void selecionarTabela() {
        int linha = listTabelas.getSelectedIndex();
        if (linha >= 0) {
            this.tabela = tabelas.get(linha);
        }
    }
    
    private void realizarAcaoTabela(MouseEvent evt) {
        if (evt.getButton() == MouseEvent.BUTTON1) { // Bot√£o Esquerdo do Mouse
            carregarPainel();
        }
    }
    
    private void preencherBancos(){
        painelPrincipal.removeAll();
        listTabelas.removeAll();
        listBancos.removeAll();
        lBanco.setVisible(false);
        tfBanco.setVisible(false);
        ConsultarInformationSchema consulta = new ConsultarInformationSchema();
        try {
            bancos = consulta.bancos();
            ListaTabelaModelo modelo = new ListaTabelaModelo(bancos);
            listBancos.setModel(modelo);
        } catch (BDException ex) {
            System.out.println("Erro: " + ex.getMessage());
        }
    }
    
    private void preencherTabelas(){
        ConsultarInformationSchema consulta = new ConsultarInformationSchema();
        try{
            tabelas = consulta.tabelas(banco);
            ListaTabelaModelo modelo = new ListaTabelaModelo(tabelas);
            listTabelas.setModel(modelo);
            tfBanco.setText(consulta.tamanhoBanco(banco));
            lBanco.setVisible(true);
            tfBanco.setVisible(true);
        } catch(BDException ex) {
            System.out.println("Erro: " + ex.getMessage());
        }
    }
    
    private void carregarPainel(){
        ConsultarInformationSchema consulta = new ConsultarInformationSchema();
        List<String> atributos;
        try {
            atributos = consulta.tabela(banco, tabela);
            Tabelas frameInterna = new Tabelas(banco, tabela, atributos);
            if (framesInternas.isEmpty()){
                criarFrameInterna(frameInterna);
            } else {
                if (!existeFrame(frameInterna)) {
                    criarFrameInterna(frameInterna);
                }
            }
        } catch (BDException ex) {
            System.out.println("Erro: " + ex.getMessage());
        }
    }
    
    private void criarFrameInterna(Tabelas frame){
        frame.setSize(150, 200);
        frame.setLocation((painelPrincipal.getWidth() - frame.getWidth())/2, (painelPrincipal.getHeight()- frame.getHeight())/2);
        frame.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentMoved(ComponentEvent e) {
                super.componentMoved(e);
                painelPrincipal.repaint();
                desenharRelacionamento();
            }
        });
        
        frame.addMouseMotionListener(new MouseInputAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                super.mouseMoved(e); //To change body of generated methods, choose Tools | Templates.
                desenharRelacionamento();
            }
        });
        
        frame.addInternalFrameListener(new InternalFrameAdapter() {
            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                super.internalFrameClosed(e);
                for (Tabelas frameInterna: framesInternas) {
                    if (frameInterna.getTitle().equals(frame.getTitle())) {
                        framesInternas.remove(frameInterna);
                        break;
                    }
                }
                desenharRelacionamento();
            }
        });
        
        frame.getListaAtributos().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                selecionarAtributo(frame);
                preencherTabelaAtributos();
            }
        });
        painelPrincipal.add(frame);
        frame.setVisible(true);
        framesInternas.add(frame);
        desenharRelacionamento();
    }
    
    private void selecionarAtributo(Tabelas frame){
        int linha = frame.getListaAtributos().getSelectedIndex();
        if (linha >= 0) {
            String banco = this.banco;
            String tabela = this.tabela;
            String atributo = frame.getAtributos().get(linha);
            List<String> atributos = new ArrayList<>();
            atributos.add(banco);
            atributos.add(tabela);
            atributos.add(atributo);
            int cont = 0;
            if (linhas.isEmpty()) {
                ConsultarInformationSchema consulta = new ConsultarInformationSchema();
                String tipo;
                try {
                    tipo = consulta.tipoAtributo(banco, tabela, atributo);
                    atributos.add(tipo);
                    linhas.add(atributos);
                } catch (BDException ex) {
                    System.out.println("Erro: " + ex.getMessage());
                }
            } else {
                for (List<String> linhaAtual: linhas) {
                    if (atributos.get(0).equals(linhaAtual.get(0)) && atributos.get(1).equals(linhaAtual.get(1)) && atributos.get(2).equals(linhaAtual.get(2))) {
                        linhas.remove(linhaAtual);
                        break;
                    } else {
                        if (cont == (linhas.size() - 1)){
                            ConsultarInformationSchema consulta = new ConsultarInformationSchema();
                            String tipo;
                            try {
                                tipo = consulta.tipoAtributo(banco, tabela, atributo);
                                atributos.add(tipo);
                                linhas.add(atributos);
                                break;
                            } catch (BDException ex) {
                                System.out.println("Erro: " + ex.getMessage());
                            }
                        }
                    }
                    cont++;
                }
            }
        }
    }
    
    private void preencherTabelaAtributos() {
        TabelaModelo modelo = new TabelaModelo(linhas);
        tbAtributos.setModel(modelo);
    }
    
    private boolean existeFrame(JInternalFrame frameInterna){
        for (JInternalFrame frame: framesInternas) {
            if (frame.getTitle().equals(frameInterna.getTitle())) {
                return true;
            }
        }
        return false;
    }
    
    private void desenharRelacionamento(){
        ConsultarInformationSchema consulta = new ConsultarInformationSchema();
        List<String> relacionamentos = new ArrayList<>();
        for (int i = 0; i < framesInternas.size(); i++) {
            for (int j = i + 1; j < framesInternas.size(); j++) {
                try {
                    relacionamentos = consulta.relacionamento(banco, framesInternas.get(i).getTitle(), framesInternas.get(j).getTitle());
                } catch (BDException ex) {
                    System.out.println("Erro: " + ex.getMessage());
                }
                if (!relacionamentos.isEmpty()) {
                    int menorDistancia[] = menorDistancia(framesInternas.get(i), framesInternas.get(j));
                    Point posicao1 = framesInternas.get(i).posicao(menorDistancia[0]);
                    Point posicao2 = framesInternas.get(j).posicao(menorDistancia[1]);
                    int posicao[] = {posicao1.x, posicao1.y, posicao2.x, posicao2.y};
                    boolean frameILadoN = false;
                    for (String atributo: framesInternas.get(i).getAtributos()) {
                        if (relacionamentos.get(1).equals(atributo.toLowerCase())) {
                            frameILadoN = true;
                            break;
                        }
                    }
                    painelPrincipal.getGraphics().drawLine(posicao[0], posicao[1], posicao[2], posicao[3]);
                    if (frameILadoN) {
                        painelPrincipal.getGraphics().drawString("N", posicao[0], posicao[1]);
                        painelPrincipal.getGraphics().drawString("1", posicao[2], posicao[3]);
                    } else {
                        painelPrincipal.getGraphics().drawString("N", posicao[2], posicao[3]);
                        painelPrincipal.getGraphics().drawString("1", posicao[0], posicao[1]);
                    }
                }
            }
        }
    }
    
    private int[] menorDistancia(Tabelas frame1, Tabelas frame2){
        int posicoes[] = new int[2];
        int frame1Posicao = 0;
        int frame2Posicao = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                int frame1X = frame1.posicao(i).x;
                int frame1Y = frame1.posicao(i).y;
                int frame2X = frame2.posicao(j).x;
                int frame2Y = frame2.posicao(j).y;
                int frame1MenorX = frame1.posicao(frame1Posicao).x;
                int frame1MenorY = frame1.posicao(frame1Posicao).y;
                int frame2MenorX = frame2.posicao(frame2Posicao).x;
                int frame2MenorY = frame2.posicao(frame2Posicao).y;
                if (Point.distance(frame1X, frame1Y, frame2X, frame2Y) < Point.distance(frame1MenorX, frame1MenorY, frame2MenorX, frame2MenorY)) {
                    frame1Posicao = i;
                    frame2Posicao = j;
                }
            }
        }
        posicoes[0] = frame1Posicao;
        posicoes[1] = frame2Posicao;
        return posicoes;
    }
    
    @Override
    public void dispose() {
        super.dispose();
        Login login = new Login();
        login.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGerarSQL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lBanco;
    private javax.swing.JLabel lUsuario;
    private javax.swing.JList listBancos;
    private javax.swing.JList listTabelas;
    private javax.swing.JPanel painelBancos;
    private javax.swing.JPanel painelCampos;
    private javax.swing.JPanel painelConsultas;
    private javax.swing.JPanel painelPrincipal;
    private javax.swing.JPanel painelTabelas;
    private javax.swing.JTable tbAtributos;
    private javax.swing.JLabel tfBanco;
    private javax.swing.JLabel tfUsuario;
    // End of variables declaration//GEN-END:variables
}
